# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: ListNode) -> ListNode:
        if head is None:
            return None
        
        if head.next == None:
            return None
          
        fast = head.next
        slow = head
        
        while( fast != slow ):
            
            if ((fast.next == None) or (slow.next == None) or (fast.next.next == None)):
                return None
           
            fast = fast.next.next
            slow = slow.next
            
          
        ptr1 = fast.next
        ptr2 = head
            
        while(ptr1 != ptr2):
  
            ptr1 = ptr1.next
            ptr2 = ptr2.next

        return ptr1
        
